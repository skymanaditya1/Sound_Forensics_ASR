package com.aditya.weka;

import weka.classifiers.Evaluation;
import weka.classifiers.functions.SMO;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

/**
 * evaluates the model with SMO (Sequential Minimal Optimization) 
 * as the classifier and the iris dataset for testing and training.
 * also implements some of the methods available with the evaluate
 * class.
 * @author aditya
 *
 */

public class EvaluateSMO {

	public static String abs_path = "/home/aditya/CCBD_Sound_Internship/Sound_Forensics_ASR_Git/Weka";
	
	public static void main(String[] args) throws Exception{
		// load the dataset for training
		DataSource train_source = new DataSource(abs_path+"/iris_train.arff");
		Instances train_dataset = train_source.getDataSet();
		
		// set the class index to the last attribute
		train_dataset.setClassIndex(train_dataset.numAttributes() - 1);
		
		// load the dataset for testing
		DataSource test_source = new DataSource(abs_path+"/iris_test.arff");
		Instances test_dataset = test_source.getDataSet();
		
		// set the class index to the last attribute
		test_dataset.setClassIndex(test_dataset.numAttributes() - 1);
		
		// build the SMO classifier 
		SMO svm = new SMO();
		svm.buildClassifier(train_dataset);
		
		// load the evaluation model with the training dataset
		Evaluation evaluation = new Evaluation(train_dataset);
		
		// evaluate the model with SMO classifier and test dataset
		evaluation.evaluateModel(svm, test_dataset);
		
		// print the results
		System.out.println(evaluation.toSummaryString("Evaluation results :\n", false));
		
		// print out the confusion matrix
		System.out.println(evaluation.toMatrixString());
		
		// useful functions with the evaluation class
		
	}
}
